/*
! tailwindcss v3.3.3 | MIT License | https://tailwindcss.com
*/

/*
1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)
2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
*/

*,
::before,
::after {
  box-sizing: border-box;
  /* 1 */
  border-width: 0;
  /* 2 */
  border-style: solid;
  /* 2 */
  border-color: #e5e7eb;
  /* 2 */
}

::before,
::after {
  --tw-content: '';
}

/*
1. Use a consistent sensible line-height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
3. Use a more readable tab size.
4. Use the user's configured `sans` font-family by default.
5. Use the user's configured `sans` font-feature-settings by default.
6. Use the user's configured `sans` font-variation-settings by default.
*/

html {
  line-height: 1.5;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -moz-tab-size: 4;
  /* 3 */
  -o-tab-size: 4;
     tab-size: 4;
  /* 3 */
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  /* 4 */
  font-feature-settings: normal;
  /* 5 */
  font-variation-settings: normal;
  /* 6 */
}

/*
1. Remove the margin in all browsers.
2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.
*/

body {
  margin: 0;
  /* 1 */
  line-height: inherit;
  /* 2 */
}

/*
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
3. Ensure horizontal rules are visible by default.
*/

hr {
  height: 0;
  /* 1 */
  color: inherit;
  /* 2 */
  border-top-width: 1px;
  /* 3 */
}

/*
Add the correct text decoration in Chrome, Edge, and Safari.
*/

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/*
Remove the default font size and weight for headings.
*/

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

/*
Reset links to optimize for opt-in styling instead of opt-out.
*/

a {
  color: inherit;
  text-decoration: inherit;
}

/*
Add the correct font weight in Edge and Safari.
*/

b,
strong {
  font-weight: bolder;
}

/*
1. Use the user's configured `mono` font family by default.
2. Correct the odd `em` font sizing in all browsers.
*/

code,
kbd,
samp,
pre {
  font-family: Kanit;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/*
Add the correct font size in all browsers.
*/

small {
  font-size: 80%;
}

/*
Prevent `sub` and `sup` elements from affecting the line height in all browsers.
*/

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
3. Remove gaps between table borders by default.
*/

table {
  text-indent: 0;
  /* 1 */
  border-color: inherit;
  /* 2 */
  border-collapse: collapse;
  /* 3 */
}

/*
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
3. Remove default padding in all browsers.
*/

button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-feature-settings: inherit;
  /* 1 */
  font-variation-settings: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  font-weight: inherit;
  /* 1 */
  line-height: inherit;
  /* 1 */
  color: inherit;
  /* 1 */
  margin: 0;
  /* 2 */
  padding: 0;
  /* 3 */
}

/*
Remove the inheritance of text transform in Edge and Firefox.
*/

button,
select {
  text-transform: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Remove default button styles.
*/

button,
[type='button'],
[type='reset'],
[type='submit'] {
  -webkit-appearance: button;
  /* 1 */
  background-color: transparent;
  /* 2 */
  background-image: none;
  /* 2 */
}

/*
Use the modern Firefox focus style for all focusable elements.
*/

:-moz-focusring {
  outline: auto;
}

/*
Remove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)
*/

:-moz-ui-invalid {
  box-shadow: none;
}

/*
Add the correct vertical alignment in Chrome and Firefox.
*/

progress {
  vertical-align: baseline;
}

/*
Correct the cursor style of increment and decrement buttons in Safari.
*/

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

/*
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/

[type='search'] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/*
Remove the inner padding in Chrome and Safari on macOS.
*/

::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to `inherit` in Safari.
*/

::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/*
Add the correct display in Chrome and Safari.
*/

summary {
  display: list-item;
}

/*
Removes the default spacing and border for appropriate elements.
*/

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}

fieldset {
  margin: 0;
  padding: 0;
}

legend {
  padding: 0;
}

ol,
ul,
menu {
  list-style: none;
  margin: 0;
  padding: 0;
}

/*
Reset default styling for dialogs.
*/

dialog {
  padding: 0;
}

/*
Prevent resizing textareas horizontally by default.
*/

textarea {
  resize: vertical;
}

/*
1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)
2. Set the default placeholder color to the user's configured gray 400 color.
*/

input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

input::placeholder,
textarea::placeholder {
  opacity: 1;
  /* 1 */
  color: #9ca3af;
  /* 2 */
}

/*
Set the default cursor for buttons.
*/

button,
[role="button"] {
  cursor: pointer;
}

/*
Make sure disabled buttons don't get the pointer cursor.
*/

:disabled {
  cursor: default;
}

/*
1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)
2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)
   This can trigger a poorly considered lint error in some tools but is included by design.
*/

img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block;
  /* 1 */
  vertical-align: middle;
  /* 2 */
}

/*
Constrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)
*/

img,
video {
  max-width: 100%;
  height: auto;
}

/* Make elements with the HTML hidden attribute stay hidden by default */

[hidden] {
  display: none;
}

*, ::before, ::after {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
}

::backdrop {
  --tw-border-spacing-x: 0;
  --tw-border-spacing-y: 0;
  --tw-translate-x: 0;
  --tw-translate-y: 0;
  --tw-rotate: 0;
  --tw-skew-x: 0;
  --tw-skew-y: 0;
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  --tw-pan-x:  ;
  --tw-pan-y:  ;
  --tw-pinch-zoom:  ;
  --tw-scroll-snap-strictness: proximity;
  --tw-gradient-from-position:  ;
  --tw-gradient-via-position:  ;
  --tw-gradient-to-position:  ;
  --tw-ordinal:  ;
  --tw-slashed-zero:  ;
  --tw-numeric-figure:  ;
  --tw-numeric-spacing:  ;
  --tw-numeric-fraction:  ;
  --tw-ring-inset:  ;
  --tw-ring-offset-width: 0px;
  --tw-ring-offset-color: #fff;
  --tw-ring-color: rgb(59 130 246 / 0.5);
  --tw-ring-offset-shadow: 0 0 #0000;
  --tw-ring-shadow: 0 0 #0000;
  --tw-shadow: 0 0 #0000;
  --tw-shadow-colored: 0 0 #0000;
  --tw-blur:  ;
  --tw-brightness:  ;
  --tw-contrast:  ;
  --tw-grayscale:  ;
  --tw-hue-rotate:  ;
  --tw-invert:  ;
  --tw-saturate:  ;
  --tw-sepia:  ;
  --tw-drop-shadow:  ;
  --tw-backdrop-blur:  ;
  --tw-backdrop-brightness:  ;
  --tw-backdrop-contrast:  ;
  --tw-backdrop-grayscale:  ;
  --tw-backdrop-hue-rotate:  ;
  --tw-backdrop-invert:  ;
  --tw-backdrop-opacity:  ;
  --tw-backdrop-saturate:  ;
  --tw-backdrop-sepia:  ;
}

.container {
  width: 100%;
}

@media (min-width: 640px) {
  .container {
    max-width: 640px;
  }
}

@media (min-width: 768px) {
  .container {
    max-width: 768px;
  }
}

@media (min-width: 1024px) {
  .container {
    max-width: 1024px;
  }
}

@media (min-width: 1280px) {
  .container {
    max-width: 1280px;
  }
}

@media (min-width: 1536px) {
  .container {
    max-width: 1536px;
  }
}

#zettelkablooey :is(.visible) {
  visibility: visible;
}

#zettelkablooey :is(.collapse) {
  visibility: collapse;
}

#zettelkablooey :is(.static) {
  position: static;
}

#zettelkablooey :is(.fixed) {
  position: fixed;
}

#zettelkablooey :is(.absolute) {
  position: absolute;
}

#zettelkablooey :is(.relative) {
  position: relative;
}

#zettelkablooey :is(.sticky) {
  position: sticky;
}

#zettelkablooey :is(.bottom-0) {
  bottom: 0px;
}

#zettelkablooey :is(.left-0) {
  left: 0px;
}

#zettelkablooey :is(.left-1) {
  left: 0.25rem;
}

#zettelkablooey :is(.left-1\/2) {
  left: 50%;
}

#zettelkablooey :is(.right-0) {
  right: 0px;
}

#zettelkablooey :is(.top-0) {
  top: 0px;
}

#zettelkablooey :is(.top-1) {
  top: 0.25rem;
}

#zettelkablooey :is(.top-1\/2) {
  top: 50%;
}

#zettelkablooey :is(.top-4) {
  top: 1rem;
}

#zettelkablooey :is(.-z-10) {
  z-index: -10;
}

#zettelkablooey :is(.z-0) {
  z-index: 0;
}

#zettelkablooey :is(.z-10) {
  z-index: 10;
}

#zettelkablooey :is(.z-30) {
  z-index: 30;
}

#zettelkablooey :is(.z-40) {
  z-index: 40;
}

#zettelkablooey :is(.float-right) {
  float: right;
}

#zettelkablooey :is(.m-2) {
  margin: 0.5rem;
}

#zettelkablooey :is(.m-4) {
  margin: 1rem;
}

#zettelkablooey :is(.mx-2) {
  margin-left: 0.5rem;
  margin-right: 0.5rem;
}

#zettelkablooey :is(.mx-auto) {
  margin-left: auto;
  margin-right: auto;
}

#zettelkablooey :is(.my-1) {
  margin-top: 0.25rem;
  margin-bottom: 0.25rem;
}

#zettelkablooey :is(.my-2) {
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
}

#zettelkablooey :is(.my-4) {
  margin-top: 1rem;
  margin-bottom: 1rem;
}

#zettelkablooey :is(.mb-8) {
  margin-bottom: 2rem;
}

#zettelkablooey :is(.block) {
  display: block;
}

#zettelkablooey :is(.inline-block) {
  display: inline-block;
}

#zettelkablooey :is(.flex) {
  display: flex;
}

#zettelkablooey :is(.table) {
  display: table;
}

#zettelkablooey :is(.grid) {
  display: grid;
}

#zettelkablooey :is(.contents) {
  display: contents;
}

#zettelkablooey :is(.hidden) {
  display: none;
}

#zettelkablooey :is(.aspect-square) {
  aspect-ratio: 1 / 1;
}

#zettelkablooey :is(.aspect-video) {
  aspect-ratio: 16 / 9;
}

#zettelkablooey :is(.h-0) {
  height: 0px;
}

#zettelkablooey :is(.h-full) {
  height: 100%;
}

#zettelkablooey :is(.h-screen) {
  height: 100vh;
}

#zettelkablooey :is(.max-h-full) {
  max-height: 100%;
}

#zettelkablooey :is(.min-h-screen) {
  min-height: 100vh;
}

#zettelkablooey :is(.w-fit) {
  width: -moz-fit-content;
  width: fit-content;
}

#zettelkablooey :is(.w-full) {
  width: 100%;
}

#zettelkablooey :is(.w-screen) {
  width: 100vw;
}

#zettelkablooey :is(.max-w-4xl) {
  max-width: 56rem;
}

#zettelkablooey :is(.max-w-lg) {
  max-width: 32rem;
}

#zettelkablooey :is(.max-w-none) {
  max-width: none;
}

#zettelkablooey :is(.flex-none) {
  flex: none;
}

#zettelkablooey :is(.flex-grow) {
  flex-grow: 1;
}

#zettelkablooey :is(.grow) {
  flex-grow: 1;
}

#zettelkablooey :is(.border-collapse) {
  border-collapse: collapse;
}

#zettelkablooey :is(.-translate-x-1) {
  --tw-translate-x: -0.25rem;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

#zettelkablooey :is(.-translate-x-1\/2) {
  --tw-translate-x: -50%;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

#zettelkablooey :is(.-translate-y-1) {
  --tw-translate-y: -0.25rem;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

#zettelkablooey :is(.-translate-y-1\/2) {
  --tw-translate-y: -50%;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

#zettelkablooey :is(.transform) {
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}

#zettelkablooey :is(.cursor-default) {
  cursor: default;
}

#zettelkablooey :is(.resize) {
  resize: both;
}

#zettelkablooey :is(.flex-col) {
  flex-direction: column;
}

#zettelkablooey :is(.flex-wrap) {
  flex-wrap: wrap;
}

#zettelkablooey :is(.items-center) {
  align-items: center;
}

#zettelkablooey :is(.justify-center) {
  justify-content: center;
}

#zettelkablooey :is(.space-x-2 > :not([hidden]) ~ :not([hidden])) {
  --tw-space-x-reverse: 0;
  margin-right: calc(0.5rem * var(--tw-space-x-reverse));
  margin-left: calc(0.5rem * calc(1 - var(--tw-space-x-reverse)));
}

#zettelkablooey :is(.space-x-8 > :not([hidden]) ~ :not([hidden])) {
  --tw-space-x-reverse: 0;
  margin-right: calc(2rem * var(--tw-space-x-reverse));
  margin-left: calc(2rem * calc(1 - var(--tw-space-x-reverse)));
}

#zettelkablooey :is(.space-y-2 > :not([hidden]) ~ :not([hidden])) {
  --tw-space-y-reverse: 0;
  margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(0.5rem * var(--tw-space-y-reverse));
}

#zettelkablooey :is(.space-y-4 > :not([hidden]) ~ :not([hidden])) {
  --tw-space-y-reverse: 0;
  margin-top: calc(1rem * calc(1 - var(--tw-space-y-reverse)));
  margin-bottom: calc(1rem * var(--tw-space-y-reverse));
}

#zettelkablooey :is(.self-center) {
  align-self: center;
}

#zettelkablooey :is(.overflow-hidden) {
  overflow: hidden;
}

#zettelkablooey :is(.overflow-x-auto) {
  overflow-x: auto;
}

#zettelkablooey :is(.overflow-y-auto) {
  overflow-y: auto;
}

#zettelkablooey :is(.whitespace-nowrap) {
  white-space: nowrap;
}

#zettelkablooey :is(.break-all) {
  word-break: break-all;
}

#zettelkablooey :is(.rounded) {
  border-radius: 0.25rem;
}

#zettelkablooey :is(.rounded-full) {
  border-radius: 9999px;
}

#zettelkablooey :is(.rounded-lg) {
  border-radius: 0.5rem;
}

#zettelkablooey :is(.rounded-none) {
  border-radius: 0px;
}

#zettelkablooey :is(.rounded-xl) {
  border-radius: 0.75rem;
}

#zettelkablooey :is(.border) {
  border-width: 1px;
}

#zettelkablooey :is(.border-blue-500) {
  --tw-border-opacity: 1;
  border-color: rgb(59 130 246 / var(--tw-border-opacity));
}

#zettelkablooey :is(.border-gray-400) {
  --tw-border-opacity: 1;
  border-color: rgb(156 163 175 / var(--tw-border-opacity));
}

#zettelkablooey :is(.border-transparent) {
  border-color: transparent;
}

#zettelkablooey :is(.border-white) {
  --tw-border-opacity: 1;
  border-color: rgb(255 255 255 / var(--tw-border-opacity));
}

#zettelkablooey :is(.bg-black) {
  --tw-bg-opacity: 1;
  background-color: rgb(0 0 0 / var(--tw-bg-opacity));
}

#zettelkablooey :is(.bg-black\/50) {
  background-color: rgb(0 0 0 / 0.5);
}

#zettelkablooey :is(.bg-gray-500) {
  --tw-bg-opacity: 1;
  background-color: rgb(107 114 128 / var(--tw-bg-opacity));
}

#zettelkablooey :is(.bg-gray-700) {
  --tw-bg-opacity: 1;
  background-color: rgb(55 65 81 / var(--tw-bg-opacity));
}

#zettelkablooey :is(.bg-slate-800) {
  --tw-bg-opacity: 1;
  background-color: rgb(30 41 59 / var(--tw-bg-opacity));
}

#zettelkablooey :is(.bg-transparent) {
  background-color: transparent;
}

#zettelkablooey :is(.bg-white) {
  --tw-bg-opacity: 1;
  background-color: rgb(255 255 255 / var(--tw-bg-opacity));
}

#zettelkablooey :is(.bg-gradient-to-br) {
  background-image: linear-gradient(to bottom right, var(--tw-gradient-stops));
}

#zettelkablooey :is(.from-black) {
  --tw-gradient-from: #000 var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(0 0 0 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}

#zettelkablooey :is(.from-slate-600) {
  --tw-gradient-from: #475569 var(--tw-gradient-from-position);
  --tw-gradient-to: rgb(71 85 105 / 0) var(--tw-gradient-to-position);
  --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to);
}

#zettelkablooey :is(.to-gray-900) {
  --tw-gradient-to: #111827 var(--tw-gradient-to-position);
}

#zettelkablooey :is(.to-slate-800) {
  --tw-gradient-to: #1e293b var(--tw-gradient-to-position);
}

#zettelkablooey :is(.object-contain) {
  -o-object-fit: contain;
     object-fit: contain;
}

#zettelkablooey :is(.object-cover) {
  -o-object-fit: cover;
     object-fit: cover;
}

#zettelkablooey :is(.p-1) {
  padding: 0.25rem;
}

#zettelkablooey :is(.p-2) {
  padding: 0.5rem;
}

#zettelkablooey :is(.p-4) {
  padding: 1rem;
}

#zettelkablooey :is(.p-8) {
  padding: 2rem;
}

#zettelkablooey :is(.px-1) {
  padding-left: 0.25rem;
  padding-right: 0.25rem;
}

#zettelkablooey :is(.px-2) {
  padding-left: 0.5rem;
  padding-right: 0.5rem;
}

#zettelkablooey :is(.px-4) {
  padding-left: 1rem;
  padding-right: 1rem;
}

#zettelkablooey :is(.px-8) {
  padding-left: 2rem;
  padding-right: 2rem;
}

#zettelkablooey :is(.py-1) {
  padding-top: 0.25rem;
  padding-bottom: 0.25rem;
}

#zettelkablooey :is(.pt-2) {
  padding-top: 0.5rem;
}

#zettelkablooey :is(.text-left) {
  text-align: left;
}

#zettelkablooey :is(.text-center) {
  text-align: center;
}

#zettelkablooey :is(.font-mono) {
  font-family: Kanit;
}

#zettelkablooey :is(.font-sans) {
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
}

#zettelkablooey :is(.font-serif) {
  font-family: Times New Roman;
}

#zettelkablooey :is(.text-2xl) {
  font-size: 1.5rem;
  line-height: 2rem;
}

#zettelkablooey :is(.text-3xl) {
  font-size: 1.875rem;
  line-height: 2.25rem;
}

#zettelkablooey :is(.text-4xl) {
  font-size: 2.25rem;
  line-height: 2.5rem;
}

#zettelkablooey :is(.text-5xl) {
  font-size: 3rem;
  line-height: 1;
}

#zettelkablooey :is(.text-base) {
  font-size: 1rem;
  line-height: 1.5rem;
}

#zettelkablooey :is(.text-sm) {
  font-size: 0.875rem;
  line-height: 1.25rem;
}

#zettelkablooey :is(.text-xl) {
  font-size: 1.25rem;
  line-height: 1.75rem;
}

#zettelkablooey :is(.font-bold) {
  font-weight: 700;
}

#zettelkablooey :is(.italic) {
  font-style: italic;
}

#zettelkablooey :is(.leading-6) {
  line-height: 1.5rem;
}

#zettelkablooey :is(.text-black) {
  --tw-text-opacity: 1;
  color: rgb(0 0 0 / var(--tw-text-opacity));
}

#zettelkablooey :is(.text-blue-400) {
  --tw-text-opacity: 1;
  color: rgb(96 165 250 / var(--tw-text-opacity));
}

#zettelkablooey :is(.text-gray-200) {
  --tw-text-opacity: 1;
  color: rgb(229 231 235 / var(--tw-text-opacity));
}

#zettelkablooey :is(.text-white) {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity));
}

#zettelkablooey :is(.underline) {
  text-decoration-line: underline;
}

#zettelkablooey :is(.opacity-50) {
  opacity: 0.5;
}

#zettelkablooey :is(.shadow-lg) {
  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);
  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
}

#zettelkablooey :is(.outline) {
  outline-style: solid;
}

#zettelkablooey :is(.blur) {
  --tw-blur: blur(8px);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

#zettelkablooey :is(.drop-shadow) {
  --tw-drop-shadow: drop-shadow(0 1px 2px rgb(0 0 0 / 0.1)) drop-shadow(0 1px 1px rgb(0 0 0 / 0.06));
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

#zettelkablooey :is(.drop-shadow-text) {
  --tw-drop-shadow: drop-shadow(0 0 6px rgb(0, 0, 0));
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

#zettelkablooey :is(.grayscale) {
  --tw-grayscale: grayscale(100%);
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

#zettelkablooey :is(.\!filter) {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow) !important;
}

#zettelkablooey :is(.filter) {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}

#zettelkablooey :is(.backdrop-blur) {
  --tw-backdrop-blur: blur(8px);
  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
          backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}

#zettelkablooey :is(.backdrop-blur-lg) {
  --tw-backdrop-blur: blur(16px);
  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
          backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}

#zettelkablooey :is(.backdrop-blur-sm) {
  --tw-backdrop-blur: blur(4px);
  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
          backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}

#zettelkablooey :is(.backdrop-filter) {
  -webkit-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
          backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}

#zettelkablooey :is(.transition-colors) {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

#zettelkablooey :is(.transition-transform) {
  transition-property: transform;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}

#zettelkablooey :is(.duration-300) {
  transition-duration: 300ms;
}

#zettelkablooey :is(.duration-500) {
  transition-duration: 500ms;
}

@font-face {
  font-family: 'Kanit';

  src: url('./assets/Kanit/Kanit-Medium.ttf');
}

#zettelkablooey :is(.child\:absolute > *) {
  position: absolute;
}
